services:
  #====================================================
  # ARQUITECTURA INTERNA (MI EMPRESA)
  #====================================================
  bill-management-service:
    build: ./internal-architecture/bill-management-service
    ports:
      - "9050:9050"
    networks:
      - internal-net
    depends_on:
      - electric-bill-service
    environment:
      - MICROSERVICE_ELECTRIC_BILL_URL=${ELECTRIC_BILL_URL}
      - FEIGN_CONNECT_TIMEOUT=${CONNECT_TIMEOUT_MS02}
      - FEIGN_READ_TIMEOUT=${READ_TIMEOUT_MS02}      

  electric-bill-service:
    build: ./internal-architecture/electric-bill-service
    ports:
      - "5000:5000"
    networks:
      - internal-net
    depends_on:
      - toxiproxy
    environment:
      - EXTERNAL_PROVIDER_URL = ${PROVIDER_URL}    
      - FEIGN_CONNECT_TIMEOUT = ${CONNECT_TIMEOUT_MS}
      - FEIGN_READ_TIMEOUT = ${READ_TIMEOUT_MS}
      - SPRING_PROFILES_ACTIVE = docker
      - R4J_ENABLED = ${R4J_ENABLED}
      - CB_REGISTER_HEALTH_INDICATOR = ${R4J_CIRCUIT_BREAKER_REGISTER_HEALTH_INDICATOR}
      - CB_SLIDING_WINDOW_TYPE = ${R4J_CIRCUIT_BREAKER_SLIDING_WINDOW_TYPE}
      - CB_SLIDING_WINDOW_SIZE = ${R4J_CIRCUIT_BREAKER_SLIDING_WINDOW_SIZE}
      - CB_MINIMUM_NUMBER_OF_CALLS = ${R4J_CIRCUIT_BREAKER_MINIMUM_NUMBER_OF_CALLS}
      - CB_FAILURE_RATE_THRESHOLD = ${R4J_CIRCUIT_BREAKER_FAILURE_RATE_THRESHOLD}
      - CB_SLOW_CALL_RATE_THRESHOLD = ${R4J_CIRCUIT_BREAKER_SLOW_CALL_RATE_THRESHOLD}
      - CB_SLOW_CALL_DURATION_THRESHOLD = ${R4J_CIRCUIT_BREAKER_SLOW_CALL_DURATION_THRESHOLD} 
      - CB_WAIT_DURATION_THRESHOLD = ${R4J_CIRCUIT_BREAKER_WAIT_DURATION_THRESHOLD}
      - CB_PERMITTED_NUMBER_OF_CALLS_IN_HALF_OPEN_STATE = ${R4J_CIRCUIT_BREAKER_PERMITTED_NUMBER_OF_CALLS_IN_HALF_OPEN_STATE}
      - CB_AUTOMATIC_TRANSITION_FROM_OPEN_TO_HALF_OPEN_ENABLED = ${R4J_CIRCUIT_BREAKER_AUTOMATIC_TRANSITION_FROM_OPEN_TO_HALF_OPEN_ENABLED}

  #====================================================
  # MONITOREO
  #====================================================
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - internal-net

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - internal-net
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml

      
  #====================================================
  # PUENTE HACIA EL EXTERIOR
  #====================================================

  toxiproxy:
    image: ghcr.io/shopify/toxiproxy:latest
    container_name: toxiproxy-server
    ports:
      - "8474:8474" # API para controlar Toxiproxy
      - "6000:6000"
    networks:
      - internal-net
      - external-net
  # volumes:
  #   - ./toxyproxy/toxiproxy-config.json:/etc/toxiproxy/config.json
  # command:
  #   - "-config=/etc/toxiproxy/config.json"
  
  #====================================================
  # ARQUITECTURA EXTERNA (OTRA EMPRESA)
  #====================================================

  wiremock:
    image: wiremock/wiremock:latest
    container_name: electric-bill-api
    volumes:
      - ./external-architecture/external-api/mappings:/home/wiremock/mappings
      - ./external-architecture/external-api/__files:/home/wiremock/__files  
    # ports:
    #   - "8080:8080"
    expose:
      - "8080"
    networks:
      - external-net

#====================================================
# DEFINICIÃ“N DE REDES
#====================================================
networks:
  internal-net:
    driver: bridge
  external-net:
    driver: bridge

volumes:
  grafana-data: